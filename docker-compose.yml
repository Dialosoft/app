version: '3.8'

services:
  database:
    image: postgres:latest
    container_name: database
    deploy:
      resources:
        limits:
          cpus: "1.5"          # The container can use up to 1.5 CPUs
          memory: 2G           # The container can use up to 2GB of RAM
        reservations:
          cpus: "0.5"          # The container is guaranteed at least 0.5 CPUs
          memory: 1G           # The container is guaranteed at least 1GB of RAM
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DATASOURCE_DB}
      POSTGRES_USER: ${DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${DATASOURCE_PASSWORD}
    ports:
      - "${DATASOURCE_PORT_LOCAL}:${DATASOURCE_PORT}"
    networks:
      - dialosoft-network
    volumes:
      - dialosoft-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-dialosoft_user} -d ${DB_NAME:-dialosoft}" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:latest
    container_name: redis
    env_file:
      - .env
    environment:
      REDIS_PORT: 6379
    ports:
      - "${REDIS_PORT_LOCAL}:6379"
    networks:
      - dialosoft-network
    volumes:
      - dialosoft-redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

  registry-service:
    build:
      context: backend/src/registry-service
    container_name: registry-service
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 1G
        reservations:
          cpus: "1.0"
          memory: 512M
    image: dialosoft-registry-eureka:v1.0
    env_file:
      - .env
    ports:
      - "8761:8761"
    depends_on:
      - database
    networks:
      - dialosoft-network
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://registry-service:8761/eureka/"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    command: [ "sh", "-c", "echo 'Registry Service ready to start' && tail -f /dev/null" ]

  auth-service:
    build:
      context: backend/src/auth-service
#    container_name: auth-service # NOTE: This is not needed due to docker needs to be able to resolve the dynamic container names of every replica
    deploy:
#      replicas: 3
#      endpoint_mode: dnsrr
      resources:
        limits:
          cpus: "2.0"
          memory: 1G
        reservations:
          cpus: "1.0"
          memory: 512M
    image: dialosoft-auth-service:v1.0
    ports:
      - "8081:8081" # NOTE: This is not needed due to docker needs to be able to resolve the dynamic container ports of every replica
      - "5006:5005"
    depends_on:
      - database
      - registry-service
    networks:
      - dialosoft-network
    env_file:
      - .env
    environment:
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      SPRING_PROFILES_ACTIVE: docker
      DATASOURCE_HOST: ${DATASOURCE_HOST}
      DATASOURCE_PORT: ${DATASOURCE_PORT}
      DATASOURCE_DB: ${DATASOURCE_DB}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://registry-service:8761/eureka/"
      REDIS_HOST: redis
      REDIS_PORT_LOCAL: ${REDIS_PORT_LOCAL}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    command: [ "sh", "-c", "echo 'Auth Service ready to start' && tail -f /dev/null" ]

  user-service:
    build:
      context: backend/src/user-service
    container_name: user-service
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 1G
        reservations:
          cpus: "1.0"
          memory: 512M
    image: dialosoft-user-service:v1.0
    ports:
      - "8086:8086"
      - "5007:5005"
    depends_on:
      - registry-service
    networks:
      - dialosoft-network
    env_file:
      - .env
    environment:
      DATASOURCE_HOST: ${DATASOURCE_HOST}
      DATASOURCE_PORT: 5432
      DATASOURCE_DB: ${DATASOURCE_DB}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://registry-service:8761/eureka/"
  #    healthcheck:
  #      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
  #      interval: 30s
  #      timeout: 10s
  #      retries: 5
  #    command: [ "sh", "-c", "echo 'User Service ready to start' && tail -f /dev/null" ]

  post-manager-service:
    build:
      context: backend/src/post-manager-service
    container_name: post-manager-service
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    image: dialosoft-post-manager-service:v1.0
    ports:
      - "8084:8084"
      - "5008:5005"
    depends_on:
      - database
      - registry-service
    networks:
      - dialosoft-network
    env_file:
      - .env
    environment:
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      SPRING_PROFILES_ACTIVE: docker
      DATASOURCE_HOST: ${DATASOURCE_HOST}
      DATASOURCE_PORT: ${DATASOURCE_PORT}
      DATASOURCE_DB: ${DATASOURCE_DB}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://registry-service:8761/eureka/"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    command: [ "sh", "-c", "echo 'Post-Manager Service ready to start' && tail -f /dev/null" ]


  management-service:
    build:
      context: backend/src/management-service
    container_name: management-service
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    image: dialosoft-management-service:v1.0
    ports:
      - "8087:8087"
    depends_on:
      - registry-service
    networks:
      - dialosoft-network
    env_file:
      - .env
    environment:
      DATASOURCE_HOST: ${DATASOURCE_HOST}
      DATASOURCE_PORT: 5432
      DATASOURCE_DB: ${DATASOURCE_DB}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://registry-service:8761/eureka/"

  gateway-service:
    build:
      context: backend/src/gateway-service
    container_name: gateway-service
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: '1g'
        reservations:
          cpus: "0.5"
          memory: '512m'
    image: dialosoft-gateway:v1.0
    ports:
      - "8080:8080"
      - "5005:5005"
    depends_on:
      - registry-service
      - user-service
      - auth-service
      - post-manager-service
      - management-service
    networks:
      - dialosoft-network
    env_file:
      - .env
    environment:
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://registry-service:8761/eureka/"
      REDIS_HOST: redis
      REDIS_PORT_LOCAL: ${REDIS_PORT_LOCAL}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    command: [ "sh", "-c", "echo 'Gateway Service ready to start' && tail -f /dev/null" ]

  frontend:
    build:
      context: frontend/
      dockerfile: Dockerfile.dev
    container_name: frontend
    ports:
      - "80:3030"
    depends_on:
      - gateway-service
    volumes:
      - ./frontend/main:/app
      - ./frontend/nginx/nginx.conf:/etc/nginx/nginx.conf
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
    networks:
      - dialosoft-network

volumes:
  dialosoft-db-data:
    name: dialosoft-db-data
    driver: local
  dialosoft-redis-data:
    name: dialosoft-redis-data
    driver: local

networks:
  dialosoft-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500  # Adjust the MTU if necessary, MTU is the maximum transmission unit of the network
